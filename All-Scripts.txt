1.konsoldan ip, userin adini,shifreni ve emir daxil edirik qoshulur remote mashina emir yerine yerib ozmuzde neticeni bildirir.


#!/usr/bin/env bash

read -p "Zetmet olmasa qoshulacagimiz mashinin IP unvanini  daxil edin: " IP
read -p ""$IP" unvanina SSH-la qoshulma ucun yetkisi olan userin adini daxil edin: " user
read -sp ""$IP" unvanin "$user" useri ucun teleb olunan shifreni daxil edin: " pass
echo
read -p 'Indi ise remote mashinda yetirilmeli olan emri daxil edin: ' order
if [[ -z $IP ]] && [[ -z $user ]] && [[ -z $pass ]] && [[ -z $order ]]
then
  echo "There are some variable is empty!!!"
else
    echo "Everything is OK!!!"
/usr/bin/expect<<EOF
     spawn ssh $user@$IP "$order"
     log_file expect_log
     set timeout 4
     expect "(yes/no)?"
     send "yes\n"
     expect " assword * "
     send "$pass\n"
     expect eof
EOF




2.konsoldan ip daxil edirsen sona script secim verir eger  1 secsen emir daxil et remote mashinda yerine yetirib neticeni oz consolmuzda gosterecek eger 2 ni secsek enter sixib sripden cixiriq

#!/usr/bin/env bash

read -p 'Please enter IP address for remote computer: ' IP
echo " please chose one of this "
echo "1) if you want write command "
echo "2) if you want exit "
read case;
case $case in
      1) read -p " Enter command for "$IP" address: " com ;;
      2) exit
esac
    ssh "$IP" "$com"





  3.script 100 defe salam necesen? Salamlar failina yazir sonar 100 defe sagol yaxsiyam. Sonar ise ilk 5 setri ve son 5 setri cixarib Sagollar filina yazir.

#!/usr/bin/env bash
for n in {1..100}
 do
  echo "Salam Necesen?"
 done > /root/salamlar

for n in {1..100}
 do
  echo "Sagol yaxshiyam"
 done >> /root/salamlar

head -n 5 salamlar > sagollar
tail -n 5 salamlar >> sagollar

#echo `sed -n '1,5p ; 195,200p' /root/salamlar` >> /root/sagollar






4.bashtrap scripte interrupt emiri vermek olmur 

#!/usr/bin/env bash
trap bashtrap INT
clear
bashtrap()
{
       echo "it's Can't Stop ! ... bashtrap yerine yetirilir !!!"
}

for q in `seq 1 20`; do
      echo "$q/20 to Exit."
      sleep 1;
done
echo "Bashtrap finish!! :)"





5. cronda teyyin edilmish vaxtda web serverde olan mueyyen 1 saytin public HTML folderiri tarla arxiv edib gziple sixir, gunun tarixi saytin adini vurur adin onune ve oturur ftp serverde olan her hansi 1 foldere.


#!/bin/bash

d=`date +%F`
cd /usr/local/www/
/bin/tar -cjf $d."datam.com.tar.bz2" datam.com
U="anar"
P="freebsd"
IP="192.168.80.165"
F="/usr/local/www/"$d".datam.com.tar.bz2"
curl -T $F "ftp://$IP/backup-datam.com/" --user $U:$P
rm $F
exit 0




6. Konsoldan Ip daxil edilir ve ona ping oturlur eger islese consolda yazilir host el catandir eks halda e-maile mail gelir ki fila nip filan ipye cata bilmir.



#!/usr/bin/env bash

echo -n "xahish olunur IP unvani daxil edesiniz: > "

read IP

ping -c1 "$IP" ;

if  [ $? == 0 ]

then
    echo "HOST ELCATANDIR"

else
ping -c1 "$IP"
echo "host ishlemir"
echo `ifconfig eth0 | grep 'inet '| cut -d: -f2 | awk '{printf $1"\n"}'` unvanli host BU "$IP" UNVANA CATA BILMIR | mail -s 'test ip' anar.slov@gmail.com

fi







7. script sadece ipni cap edir


#!/usr/bin/env bash

ip=$(ifconfig eth0 | grep 'inet '| cut -d: -f2 | awk '{printf $1"\n"}')
echo "$ip"









8. consldan yerleshdiyin yerde olan file adini daxil edirsen,  o qoshulur artiq onceden teyyin edilmish mashina ve orda teyyin edilmish folder yoxlayir eger o fail orda varsa yazir ki artiq var o fail orda movcuddur  eger olmasa kopyaliyir onu ora

#!/usr/bin/env bash

read -p "xahish olunur faylin adini daxil edesiniz: > " FN
echo $FN
a=`ssh 192.168.80.153 "ls /usr/local/www/test.az | grep $FN"`
copy=`scp $FN 192.168.80.153:/usr/local/www/test.az/`
echo $a
if [ "$a" == "$FN" ]
then
 echo "Fayl artiq movcuddur!!!"
else
 `$copy`
  echo "Fayl ugurla elave edildi!!!"
fi











      9.    serverin tipini teyyin edib web server yoxlayib gerekirse restart edir



#!/usr/bin/env bash

read -p "Please enter Ip:>" IP
ssh $IP "cat /etc/redhat-release ; uname -v" > file
ssh $IP "netstat -na| grep LISTEN | grep -v STREAM | grep 80"
if [ $? = 0 ]
then
echo "web server is runing"
exit
fi

cat file | awk '{print $1}'| grep FreeBSD
if [ $? = 0 ]
then
ssh $IP "/usr/local/etc/rc.d/apache24 restart" > file
cat file | grep 'Starting apache24.'
if [ $? = 0 ]
then
echo "web server reinstated"
else
echo "An error occurred during the start WEB server, Please check in"
exit
fi
   fi

   cat file | awk '{ print $1 }' | grep CentOS
if [ $? == 0 ]
then
ssh $IP "systemctl restart httpd.service"
ssh $IP "netstat -na| grep LISTEN | grep :80"
if [ $? == 0 ]
then
echo "web server reinstated"
else
echo "An error occurred during the start WEB server, Please check in"
exit
fi
   fi






10. serverin tipini teyyin edib web server yoxlayib tipini teyyin edir ve gerekirse restart edir  Neticeni bildirir


  #!/bin/bash

# For use "sshpass" we must install this as follows:
# For FreeBSD: pkg install -y sshpass
# For Centos: yum -y install sshpass

read -p "Please enter IP address for server: " IP
read -sp "Please enter password for $IP server: " pass
echo

chonctos=$(sshpass -p "$pass" ssh root@$IP "netstat -nutlp | grep :80 | tr ':' '\n' | grep '^80' | cut -f1 -d' '" 2>/dev/null)
chonbsd=$(sshpass -p "$pass" ssh root@$IP "sockstat -l | grep 80 | head -1 | cut -f2 -d':' | cut -f1 -d' '" 2>/dev/null)
servername=$(sshpass -p "$pass" ssh root@$IP "uname -o | cut -f'2' -d'/'")
ftype=$(sshpass -p "$pass" ssh root@$IP "uname -r | cut -f1 -d'.'")
ltype=$(sshpass -p "$pass" ssh root@$IP "cat /etc/centos-release | cut -f1 -d' '" 2>/dev/null)
ngserv="service nginx start"
ngpidfile="ls /var/run/nginx.pid"
apserv="service apache24 start"
apcosserv="service httpd start"
apcospidfile="ls /var/run/httpd/httpd.pid"
appidfile="ls /var/run/httpd.pid"
if [[ $servername == "FreeBSD" ]] && [[ $ftype == "10" ]]
then
    echo "This is FreeBSD server!!!"
    if [[ $chonbsd == "80" ]]
    then
        findwebname=$(sshpass -p "$pass" ssh root@$IP "sockstat -l | grep 80 | grep root | grep -v tcp6 | tr -s ' ' | cut -f2 -d ' '" 2>/dev/null)
        if [[ $findwebname == "httpd" ]]
        then
            echo "Apache web server is already works on FreeBSD!!!"
            exit 0
        elif [[ $findwebname == "nginx" ]]
        then
            echo "Nginx web server is already works on FreeBSD!!!"
            exit 0
        else
            echo "This script is not determined the type of WEB server!!!"
            exit 122
        fi
    else
        echo "Trying to start WEB server on FreeBSD!!!"
        startonbsd=$(sshpass -p "$pass" ssh root@$IP "$ngserv" 2>/dev/null)
        webpidbsd=$(sshpass -p "$pass" ssh root@$IP "$ngpidfile" 2>/dev/null)
        startaponbsd=$(sshpass -p "$pass" ssh root@$IP "$apserv" 2>/dev/null)
        webapidbsd=$(sshpass -p "$pass" ssh root@$IP "$appidfile" 2>/dev/null)
        sleep 1
        if [[ $webpidbsd == "/var/run/nginx.pid" ]]
        then
            echo "Nginx web server is successfully started on FreeBSD!!!"
        elif [[ $webapidbsd == "/var/run/httpd.pid" ]]
        then
            echo "Apache web server is successfully started on FreeBSD!!!"
        else
            echo "Web server isn't started on FreeBSD!!!"
        fi
    fi
elif [[ $servername == "Linux" ]] && [[ $ltype == "CentOS" ]]
then
    echo "This is CentOS server!!!"
    if [[ $chonctos -eq "80" ]]
    then
        findwebnamec=$(sshpass -p "$pass" ssh root@$IP "lsof -i :80 | grep root | tr -s ' ' | cut -f1 -d' '")
        if [[ $findwebnamec == "nginx" ]]
        then
            echo "Nginx web server is already works on CentOS!!!"
            exit 0
        elif [[ $findwebnamec == "httpd" ]]
        then
            echo "Apache web server is already works on CentOS!!!"
            exit 0
        fi
    else
        echo "Trying to start WEB server on CentOS!!!"
        startonlinux=$(sshpass -p "$pass" ssh root@$IP "$ngserv" 2>/dev/null)
        webpidlinux=$(sshpass -p "$pass" ssh root@$IP "$ngpidfile" 2>/dev/null)
        startaponcos=$(sshpass -p "$pass" ssh root@$IP "$apcosserv" 2>/dev/null)
        webapidcos=$(sshpass -p "$pass" ssh root@$IP "$apcospidfile" 2>/dev/null)
        sleep 1
        if [[ $webpidlinux == "/var/run/nginx.pid" ]]
        then
            echo "Nginx web server is successfully started on Linux!!!"
        elif [[ $webapidcos == "/var/run/httpd/httpd.pid" ]]
        then
            echo "Apache web server is successfully started!!!"
        else
            echo "Web server isn't started on CentOS!!!"
        fi
    fi
else
    echo "This is not any type of Linux/UNIX server!!!"
fi

echo "========================================================================"









11.  konsolsan ipni parolu useri alir ozunde backup edilecek folder tarla arxiv edib bziple sixir sonar hemin faili scp ile kocurdur qarshi mashina ve ozunde ki sixilmis backupla kocurduyu backupin uzunlugunu sha256 ile yoxlayır eger eynidise emeliyyet ugurla yerine yetirildi yazib cixir  yox eyni deyilse yeniden bu emelyetı edir alinmasa kocurmrə mumkun deyil yazib  cixir



#!/usr/bin/env bash

# yum -y install sshpass

read -p "Please enter ip: " ip
read -p "Please enter user name: " user
read -sp "Please enter password: " pas
echo

$(/bin/tar -cjf `date +%F`.backup.tar.bz2 backup/)
CKS=$(sha256sum `date +%F`.backup.tar.bz2 | cut -f1 -d ' ')
CP=$(sshpass -p "$pas" scp "`date +%F`.backup.tar.bz2" $user@$ip:/root/)
RCKS=$(sshpass -p "$pas" ssh $user@$ip "sha256sum `date +%F`.backup.tar.bz2 | cut -f1 -d ' '")
if [[ $CKS == $RCKS ]]
then
    rm -rf `date +%F`.backup.tar.bz2
    echo "Copying has been successfully completed"
    exit 0
elif [[ $CKS != $RCKS ]]
then
    $CP
    RCKS1=$(sshpass -p "$pas" ssh $user@$ip "sha256sum `date +%F`.backup.tar.bz2 | cut -f1 -d ' '")

    if [[ $CKS == $RCKS1 ]]
    then
       rm -rf `date +%F`.backup.tar.bz2
       echo "Copying has been successfully completed"
    else
        echo "Backup is not executed!"
    fi
fi







12.skript salam failna 5 defe nomrelenmish salam yazir



#!/usr/bin/env bash

for n in {1..5}
do
echo $n."salam"
 done > /root/salam




12.  teyyin olunmush iplist faylindan script aypileri oxuyur ve her bir mashinla tokenautotukeyshin yaradir ki bu mashinlarin hammisi bir biri ile shifresiz ishlesin oz mashinida daxil olmaq sherti ile




1 #!/usr/bin/env bash
  2 ipler=`cat /root/iplist`
  3 read -sp "enter password for root: " pas
  4 echo
  5 $(ssh-keygen -q -N '' -f ~/.ssh/id_rsa)
  6 $(cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys)
  7 iz=$(ifconfig em0 | grep 'inet '| cut -d: -f2 | cut -d" " -f2)
  8 $(ssh-keyscan $iz > .ssh/known_hosts 2>/dev/null)
  9 for ip in $ipler
 10 do
 11     $(ssh-keyscan $ip >> .ssh/known_hosts 2>/dev/null)
 12     sshpass -p $pas ssh root@$ip "ssh-keygen -q -N '' -f ~/.ssh/id_rsa"
 13     sshpass -p $pas ssh root@$ip "cat /root/.ssh/id_rsa.pub" >> /root/.ssh/authorized_keys
 14 done
 15 auk=.ssh/authorized_keys
 16 nh=.ssh/known_hosts
 17 for ip in $ipler
 18 do
 19 sshpass -p $pas scp -r $nh $auk root@$ip:/root/.ssh/
 20 done




13. teyyin olunmush iplist faylindan script ipileri oxuyur ve her bir mashinla tokenautotukeyshin yaradir ki bu mashinlarin hammisi bir biri ile shifresiz ishlesini temin edir oz mashininda ip-ni ipliste daxil edirik 



1 #!/usr/bin/env bash
  2 ipler=`cat /root/iplist`
  3 read -sp "enter password for root: " pas
  4 echo
  5 mkdir /root/.ssh
  6 for ip in $ipler
  7 do
  8     $(ssh-keyscan $ip >> .ssh/known_hosts 2>/dev/null)
  9     sshpass -p $pas ssh root@$ip "ssh-keygen -q -N '' -f ~/.ssh/id_rsa"
 10     sshpass -p $pas ssh root@$ip "cat /root/.ssh/id_rsa.pub" >> /root/.ssh/authorized_keys
 11 done
 12 auk=.ssh/authorized_keys
 13 nh=.ssh/known_hosts
 14 for ip in $ipler
 15 do
 16 sshpass -p $pas scp -r $nh $auk root@$ip:/root/.ssh/
 17 done



14. Eger service teyyin edilmish limitden cox fail acarsa yani to many files error olursa bunu script her 3 saatdan 1 check edib servizi restart edir ve mail gonderir

#!/bin/sh
#Author :  Anar Shamilov
#If mno open to many files script will be restart mno service and send e-mail to admins
#Cron do it every 3 hours On behalf of the user Anar

pid=$(/bin/ps waux | /bin/grep mno | /bin/grep mis | /usr/bin/awk '{ print $2 }')
F=$(echo 'mis!pin0'| sudo -S /bin/ls /proc/$pid/fd | /usr/bin/wc -l)
if [ $F -ge 3584 ]; then
        echo 'mis!pin0'| sudo -S /sbin/initctl restart best-mis-mno
	echo best-mis-mno has been restarted | /usr/bin/mail -s 'MIS-1 Problem' anar.slov@gmail.com,elvinpasha@gmail.com
fi

#####  User Crontab –e edib ashagidaki kimi elave edirik.

09 */3 * * * sh /home/anar/mno-check.sh >/dev/null 2>&1


15. buckap filleri 3 gunden 1 yoxlayir sonuncunu cixmaq sherti ile hammisini silir Mis-den

#!/bin/bash
#Automated and improved          :Anar Shamilov
#date                            :16/03/2017


S=$(ls /root | grep backup-2 | head -n 1 | cut -f 3 -d '-' | cut -f 1 -d .)
F=$(ls /root | grep backup-2 | tail -n 1 | cut -f 3 -d '-' | cut -f 1 -d .)
R=$(($F - 1))
for i in `seq $S $R`;
do
echo $i
cd /usr/local/mysql/mysql-cluster/BACKUP/BACKUP-$i; rm *
cd /root
rm backup-2-$i.tar.bz2
done


16. Log filleri log folderinden arxiv folderine tarixle yigir

#!/usr/bin/env bash

echo "Please input year "
read x
echo "Please input month "
read y
for z in 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
do
file1=ejbca.log.$x-$y-$z
file2=ocsp_audit.log.$x-$y-$z
file3=server.log.$x-$y-$z
if [ -f $file1 ];
then
	mkdir -p /hdd/ejbca-logs/$x/$x-$y/
	mv ejbca.log.$x-$y-$z /hdd/ejbca-logs/$x/$x-$y/
elif [ -f $file2 ];
then
	mkdir -p /hdd/ocsp-logs/$x/$x-$y/
	mv ocsp_audit.log.$x-$y-$z /hdd/ocsp-logs/$x/$x-$y/
elif [ -f $file3 ];
then
	mkdir -p /hdd/server-logs/$x/$x-$y/
	mv server.log.$x-$y-$z /hdd/server-logs/$x/$x-$y/
else
#:>/dev/null
	echo "No results found for $x-$y date."
fi
done



16. Databasden ve loglardan User haqqinda melumatlar verir MIS-de. Ilk arqument Asan imza nomresidi 2-ci ise database password.

#!/bin/bash

LOG=$(basename $0 | cut -f1 -d'.').log
:> ${LOG} 

Blue="\e[0;36m"
GREEN='\033[0;1;32m'
RED='\033[0;31m'
White='\033[0;37m'
Blink='\e[5m'
Normal='\e[25m'

while [ "$numtype" != "True" ]
do
	read -p "Please enter $(echo -e ${RED}number of user ${GREEN}+994): " number
	if [ "$number" -eq "$number"  2> /dev/null -a  "${#number}" = 9 ]
	then
		numtype='True'
	else
		echo "Entered number cannot be less or more than 9 characters and cannot be string!!!"
	fi
done

checkmysqlpass() {
	read -sp "Please enter $(echo -e ${RED}MySQL read-only ${Blue}${Blink}password ${Normal}): " pass
	until mysql -uelvin -p$pass  -e ";" 2> /dev/null
	do
		read -sp "Can't connect, please retry $(echo -e ${RED}MySQL read-only ${Blue}${Blink}password ${Normal}): " pass
	done
}

logall(){
   echo "$(date +%d.%m.%Y_%H:%M:%S)  ----------------------------------------------------" | tee -a ${LOG}
   echo "$(date +%d.%m.%Y_%H:%M:%S)  ---- Started: " | tee -a ${LOG}
   echo "                   Result   ----   $1" | tee -a ${LOG} 
   echo "$(date +%d.%m.%Y_%H:%M:%S)  ---- Ended: " | tee -a ${LOG}
}

selector(){
    checkmysqlpass
    echo -e $White
    getvars=$(mysql -uelvin -p"$pass" misdb -e "select iccid, phone_number, sale_date, closure_date, suspended, personal_code from sim where phone_number = '+994$number' ORDER BY sale_date DESC;" | grep -v iccid | head -1) 
    usingstat=$(mysql -uelvin -p"$pass" misstatdb -e"select * from stat where phone_number = '+994$number' and event_succeeded = '0';" | grep -v event_type | tail -n1) 
    usingstat1=$(mysql -uelvin -p"$pass" misstatdb -e"select * from stat where phone_number = '+994$number';" | grep -v event_type | tail -n1)
}

findnumberlogs() {
	zcat /var/log/asan-imza/mis-online-service.$1.* | grep $2 | grep -i error
}

selector

dateoflog=$(echo $usingstat | awk '{ print $3 }')
dateoflog1=$(echo $usingstat1 | awk '{ print $3 }')

if [ -n $getvars 2> /dev/null ]
then
	echo "This Number $(echo -e ${GREEN}$number ${White}) is not exist in database "
elif [ "$(echo $getvars | awk '{ print $5 }')" = "NULL" -a "$(echo $getvars | awk '{ print $6 }')" = "0" ]
then
    logall "Everthing is okay (Number is not suspend and not closed) "
    logall "$getvars"
    logall "$usingstat"
    findnumberlogs "$dateoflog" "$number" 
elif [ "$(echo $getvars | awk '{ print $5 }')" = "NULL" -a "$(echo $getvars | awk '{ print $6 }')" != "0" ] 
then
    logall "Service is suspended!!! latest used date "$(echo $dateoflog1)""
    findnumberlogs "$dateoflog1" "$number"
else
    logall "SIM closed!!! $(echo $getvars | awk '{ print $5 }')"
fi







17. Script for update system automatically with cron > /var/log/auto-update/last.log
Additional command on terminal:
Mkdir /var/log/auto-update/



#!/bin/bash
DATEFILE="/var/log/auto-update/update.$(date +%F).log"
LOG="tee -a $DATEFILE"
com="update dist-upgrade autoremove"
apt () {
	$1 $u -y | $LOG
}
for u in $com
do      
apt "apt-get"
done
if [ "$?" == 0 ]
then
	echo "$?" > $DATEFILE
else
	echo "BAD result " >> $DATEFILE
fi 




18. her ayin 2-I  3 ay evvelki logu move edir /hdd-ye ve /hdd-den 4 ay evvelki logu arxive edir /hdd2 unvanina


#!/usr/bin/env bash
# Script compresses files ocsp_audit.log, ejbca.log and server.log in /hdd/ and send in arxiv folder /hdd2

y=$(date -d "-2 month" +%F | cut -f1 -d -)
m=$(date -d "-2 month" +%F | cut -f2 -d -)
mh=$(date -d "-4 month" +%F | cut -f2 -d -)


monthday="01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
declare -A LOGMAP=( [ejbca]=ejbca-logs [ocsp_audit]=ocsp_audit-logs [server]=server-logs )

logmover (){
    if [ -f /opt/jboss5/server/default/log/$1.log.$y-$m-$z ];
    then
        mkdir -p /hdd/$2/$y/$y-$m/
        mv /opt/jboss5/server/default/log/$1.log.$y-$m-$z /hdd/$2/$y/$y-$m/
        echo "   $1.log.$y-$m-$z   Has been moved to   /hdd/$2/$y/$y-$m/ "
    else
        echo "No results found in /opt/jboss5/server/default/log/ folder for  $1.log.$y-$m-$z "
    fi
}

for z in $monthday
do
    for logkv in "${!LOGMAP[@]}"
    do
        logmover "$logkv" "${LOGMAP[$logkv]}"
    done
done

logarxiv () {
    firstdate=$(ls /hdd/$3-logs/$1/$1-$2/ 2> /dev/null | head -n1 | cut -f3 -d'.')
    lastdate=$(ls /hdd/$3-logs/$1/$1-$2/ 2> /dev/null | tail -n1 | cut -f3 -d'.') 
    logname=$(ls /hdd/$3-logs/$1/$1-$2/ 2> /dev/null | head -n1 | cut -f1 -d'2') 
    if [[ -z "$logname" ]] 
    then 
        echo "   WARNING:  hdd/$3-logs/$1/$1-$2/      is EMPTY OR NOT FOUND for make ARXIVE !!! "
    else    
        cd /hdd/$3-logs/$1/$1-$2
        /bin/tar -czvf $logname$firstdate--$lastdate.tar.gz $logname* --remove-file 
        sleep 2
        echo "   $logname$firstdate--$lastdate.tar.gz   arxive file has been created successfully and now start to move in /hdd2/arxive.$3.log "  
        mv $logname$firstdate--$lastdate.tar.gz /hdd2/arxive.$3.log
        echo "   $logname$firstdate--$lastdate.tar.gz   file has been moved in arxive done completely"
    fi
} 

for lognames in "${!LOGMAP[@]}"
do
    logarxiv "$y" "$mh" "$lognames"
done


